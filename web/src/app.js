class TodoApp {
    constructor() {
        console.log("üîß TodoApp —Å–æ–∑–¥–∞–Ω");
        this.taskList = null;
        this.taskInput = null;
        this.addTaskBtn = null;
        this.saveBtn = null;
        this.loadBtn = null;
        this.fileInput = null;

        this.init();
    }

    async init() {

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupApp());
        } else {
            await this.setupApp();
        }
    }

    async setupApp() {

        try {
            this.taskList = new TaskList('taskList');
            this.taskInput = document.getElementById('taskInput');
            this.addTaskBtn = document.getElementById('addTaskBtn');
            this.saveBtn = document.getElementById('saveBtn');
            this.loadBtn = document.getElementById('loadBtn');
            this.fileInput = document.getElementById('fileInput');


            if (!this.taskInput || !this.addTaskBtn) {
                throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã DOM');
            }

            this.bindEvents();

            console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TaskService...");
            await window.taskService.initialize();

            const tasks = window.taskService.getAllTasks();
            this.taskList.updateTasks(tasks);

            console.log("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å API!");

        } catch (error) {
            console.error("!!–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message);
        }
    }

    bindEvents() {
        this.addTaskBtn.addEventListener('click', () => this.addTask());
        this.taskInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') this.addTask();
        });

        if (this.saveBtn) {
            this.saveBtn.addEventListener('click', () => this.saveToFile());
        }

        if (this.loadBtn && this.fileInput) {
            this.loadBtn.addEventListener('click', () => this.fileInput.click());
            this.fileInput.addEventListener('change', (e) => this.loadFromFile(e.target.files[0]));
        }

        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                this.saveToFile();
            }
            if (e.ctrlKey && e.key === 'o') {
                e.preventDefault();
                if (this.fileInput) this.fileInput.click();
            }
        });
    }

    async addTask() {
        const text = this.taskInput.value.trim();

        if (!text) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏');
            this.taskInput.focus();
            return;
        }

        try {
            const newTask = await window.taskService.createTask(text);
            this.taskList.addTask(newTask);
            this.taskInput.value = '';
            this.taskInput.focus();

            this.showSuccess('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' + error.message);
        }
    }

    async saveToFile() {
        try {
            const tasks = window.taskService.getAllTasks();
            const dataStr = JSON.stringify(tasks, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });

            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `todo-list-${new Date().toISOString().split('T')[0]}.json`;
            link.click();

            URL.revokeObjectURL(link.href);
            this.showSuccess('–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª');
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message);
        }
    }

    async loadFromFile(file) {
        if (!file) return;

        try {
            const reader = new FileReader();
            reader.onload = async (e) => {
                try {
                    const data = JSON.parse(e.target.result);

                    if (!Array.isArray(data)) {
                        throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á');
                    }

                    await window.taskService.loadTasks(data);
                    const tasks = window.taskService.getAllTasks();
                    this.taskList.updateTasks(tasks);

                    this.showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞`);
                } catch (parseError) {
                    this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + parseError.message);
                }
            };
            reader.readAsText(file);
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + error.message);
        }
    }

    showSuccess(message) {
        this.showNotification(message, 'success');
    }

    showError(message) {
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info') {
        if (this.taskList && this.taskList.showNotification) {
            this.taskList.showNotification(message, type);
        } else {
            alert(type === 'error' ? '‚ùå ' + message : '‚úÖ ' + message);
        }
    }
}

window.todoApp = new TodoApp();